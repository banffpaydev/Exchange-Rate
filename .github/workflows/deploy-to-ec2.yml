name: Deploy Python Web Scraping Worker

on:
  push:
    branches:
      - pythonscrapper  # Run the workflow on pushes to the main branch

env:
  DOCKER_USERNAME: franklinokeh505
  DOCKER_PASSWORD: Hdneknelg15$  # Set this in GitHub Secrets
  AWS_REGION: eu-west-2
  ECR_REGISTRY: 182399679274.dkr.ecr.eu-west-2.amazonaws.com  # ECR registry (if needed, otherwise use Docker Hub)
  ECR_REPOSITORY: bpay/pythonsrapper  # Repository for Node.js app
  CONTAINER_NAME: pythonsrapper
  EC2_HOST: ec2-18-130-12-213.eu-west-2.compute.amazonaws.com  # Your EC2 instance's public DNS
  EC2_USER: ec2-user
  EC2_SSH_PORT: 22

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }} .

      - name: Push Docker Image
        run: docker push ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEowIBAAKCAQEApDjY+Snba7z3n+9vlwx6q0jZfK6YhW8z5Ap48F9S/7whyBKw
            DF84H7uf2Ny9sYKGCShMbCaebJly34EmsC2/A+/mOMH69auqAih3SkDAUOmepULN
            AZGeNX9dQPfUF4lMyrrtvMH41WqigwuYq26LxV0c3dWryLvVKdXGXFNm5WTD9d9m
            IHyJ9gYNZB8BjqcJQK6XMiW8k5k5ELWY5db8XmypGvlkuwztZT7ruGNMfBTcO3pp
            Axxw9a7kykkXZ/XyXnsI+KqZVVHTwSuFPXM/wqI9JIbMBTQFX1TCW/9VzbWtluhF
            Fceu5Mz+N85/5UWrK9r9aBRUqNtRYs3jpOe1AwIDAQABAoIBAG/TchRBJ3Q26lwT
            PGacDdAjPE4FykBal/g6FV6BWtBf+JT3/L9/+4TIS7HtppKAser8cQXYSlrjJvEB
            Tin8DK2Op7OQi+bMbWkoywpaC1tNqkUYtubRlO0S/Jpn6Bna2drW7Vpyr5IMGfuo
            Yt6h2TWdETIR9PcsyJvDQV7PQCsFmKonJMVqQpEMXWKlL4YnK571IT/RIW0nzjiR
            mdVxsQi7eZkWq4n/qr8EqPTBiGyYBm7tueEEsSlc5CeaAq+KNvKBGjF7/dT8BcLj
            jOUAhPs84HeShwAPPs6Svf7TxzxYfYauPxls37jwynLgl4ZlugnuFgruXXfm56K7
            K10Oz0ECgYEA5p2RmhjP1h59ReYE/b2R4OAR+WYefoUEebddfiJoZaE8/25xBhYe
            e2pTgEd7JvAU/ZNrrqbrOOSzsuP14KAK5qSl8Sl0P/2+M6LWwmIgXLmSp7xCVeBp
            B7NHME21PEUT25VnRQhHk6X75cAJIm/Yy3hpPuJODMsAJ4vOAfAeTWMCgYEAtkxm
            4gO410Yt2TfWpSzPXpjzZWKaE5yFqgk2f4j/ZBbuCTpx5AehosO+hU9begnDN96s
            WWMZ9OvHtpG3ptDuP+rpvvRR/D7e45RZzIrbPICUkrnOIIG+qIhtNIUalZ+l9QC+
            BRvBcBgWTye8ZwbyH39y0qVYdceP6l5FhvdG2+ECgYEAmrebt4Zt6XkLEpn/Pzyv
            Ye7yICAi1T7ogcBDORxcbdJ+2d9+dFbinGn5G1bZiIYJjxYYaFQT+1d0N9A4ZTr6
            FULhEap+E3Bo6ruU2VR74bmeamojFvo3fLMKT53SuVyetfLGFco4OxZgqQLtHe1r
            xRZDhazOMEcBE4b37tTpf4ECgYAT+j90GVBSVyCDI3lkVIrNJRnXTHzyFT8YqTXN
            uCe0wkaHwF3mzWdLPQRN+6pcr2EzaDWe/htEGeqi+UkVAOR7ILVI9eFeMU2fxwwo
            PDdWZAjkI3SRX2aTdY/yJ3wIVZyMQu6QBMCoFhurxQECkWJLTV4582DEV4BQANDB
            v6uGQQKBgELXbWKtkYOd3HfobIPdVkwfbVYT/yq4qxZEM7lj5MuBGkSSxtBNVHdl
            tlZ/LPEj7++jXUhE7vBIdmhfTdQcxGOsyy1xBbJcyDZuSJqjc88Sjuar2A0c2G4y
            /HFIOQj0cDMhXn1uHKQgoQ4zqT6+guPW7Zr8Ho+O2j9J2yb+U0A6
            -----END RSA PRIVATE KEY-----

      - name: Deploy Worker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ env.EC2_SSH_PORT }} ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << EOF
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest

            # Stop and remove any existing container with the same name
            if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }})" ]; then
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi

            # Run the new container
            docker run -d --name ${{ env.CONTAINER_NAME }} ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest
          EOF
